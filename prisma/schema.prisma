// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  username      String?   @unique // Added for onboarding
  image         String?
  password      String?   // For credentials authentication
  role          UserRole  @default(GUEST)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Onboarding fields
  onboardingStatus OnboardingStatus @default(PENDING)
  onboardingStep   String?
  fullName         String?
  profilePictureUrl String?

  // Profile fields
  bio           String?
  location      String?
  phone         String?
  isVerified    Boolean   @default(false)

  // Profile relationships
  hostProfile       HostProfile?
  travelerProfile   TravelerProfile?
  guestPreferences  GuestPreferences?
  influencerProfile InfluencerProfile?

  // Relationships
  properties        Property[]
  bookings          Booking[]
  reviews           Review[]
  followers         Follow[]   @relation("UserFollowers")
  following         Follow[]   @relation("UserFollowing")
  likes             Like[]
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  postLikes         PostLike[]
  postComments      PostComment[]
  
  // Onboarding relationships
  onboardingProgress OnboardingProgress?
  socialConnections  SocialConnection[]

  @@map("users")
}

model HostProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName     String?
  taxId            String?
  bankAccount      String?
  cryptoWallet     String?
  commission       Float             @default(0.05) // 5% commission
  
  // Onboarding fields
  identityVerified Boolean           @default(false)
  verificationStatus VerificationStatus @default(PENDING)
  verificationDate DateTime?
  standardOffer    Json?             // Collaboration offer details
  minFollowerCount Int?
  preferredNiches  String[]
  referralCode     String?           @unique
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("host_profiles")
}

model TravelerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences Json?    // Travel preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("traveler_profiles")
}

// Onboarding progress tracking
model OnboardingProgress {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStep    String
  completedSteps Json      @default("[]") // Array of completed step names
  metadata       Json?
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  
  @@map("onboarding_progress")
}

// Guest preferences
model GuestPreferences {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  travelInterests String[] // Array of interest tags
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("guest_preferences")
}

// Influencer profiles
model InfluencerProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  identityVerified Boolean           @default(false)
  verificationStatus VerificationStatus @default(PENDING)
  verificationDate DateTime?
  contentNiches    String[]          // Required field
  deliverables     Json?             // Standard deliverables and terms
  portfolioUrl     String?
  profileLink      String?           @unique // Unique link for promotion
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("influencer_profiles")
}

// Social media connections
model SocialConnection {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform         SocialPlatform
  platformUserId   String
  username         String?
  followerCount    Int?
  accessToken      String?   // Encrypted
  refreshToken     String?   // Encrypted
  tokenExpiresAt   DateTime?
  isPrimary        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([userId, platform])
  @@map("social_connections")
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  type        PropertyType
  address     String
  city        String
  country     String
  latitude    Float?
  longitude   Float?
  geocodingAccuracy String? // 'exact', 'street', 'city', 'approximate', or null if not geocoded
  geocodingFailed Boolean  @default(false) // true if all geocoding attempts failed
  price       Float
  currency    String   @default("EUR")
  maxGuests   Int
  bedrooms    Int
  bathrooms   Int
  amenities   String[]
  images      String[]
  rules       String[]
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  hostId      String
  host        User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
  likes       Like[]
  availability Availability[]
  posts       Post[]
  ads         Ad[]

  @@map("properties")
}

model Availability {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  date       DateTime
  isAvailable Boolean  @default(true)
  price      Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, date])
  @@map("availability")
}

model Booking {
  id          String        @id @default(cuid())
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalPrice  Float
  currency    String        @default("EUR")
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  propertyId  String
  property    Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  travelerId  String
  traveler    User          @relation(fields: [travelerId], references: [id], onDelete: Cascade)
  payment     Payment?
  review      Review?

  @@map("bookings")
}

model Payment {
  id          String        @id @default(cuid())
  amount      Float
  currency    String
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  cryptoAmount Float?
  cryptoCurrency String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  bookingId   String        @unique
  booking     Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  reviewerId  String
  reviewer    User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Like {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // Relationships
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("likes")
}

model Follow {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // Relationships
  followerId String
  follower   User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following  User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model LocalExperience {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  location    String
  price       Float?
  currency    String   @default("EUR")
  images      String[]
  contactInfo String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("local_experiences")
}

model Post {
  id          String     @id @default(cuid())
  content     String
  images      String[]
  location    String?
  propertyId  String?    // Optional link to property for property posts
  property    Property?  @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       PostLike[]
  comments    PostComment[]

  @@map("posts")
}

model PostLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model PostComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_comments")
}

model Ad {
  id          String   @id @default(cuid())
  title       String
  description String?
  images      String[]
  link        String?  // URL link for the ad
  isActive    Boolean  @default(true)
  priority    Int      @default(0) // Higher priority shows first
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships - could be property ad or experience ad
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("ads")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum UserRole {
  GUEST
  HOST
  INFLUENCER
  TRAVELER
  ADMIN
}

enum OnboardingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SocialPlatform {
  INSTAGRAM
  TIKTOK
  YOUTUBE
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  BNB
  HOTEL
  HOSTEL
  CABIN
  TENT
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  COINBASE
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
